import asyncio
import aiohttp
import random
import logging
import re
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
from config import config

logger = logging.getLogger(__name__)

class DeepSeekService:
    def __init__(self):
        self.api_key = config.DEEPSEEK_API_KEY
        self.api_url = "https://api.deepseek.com/v1/chat/completions"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        self.user_contexts: Dict[int, Dict] = {}
        self.session_timeout = timedelta(minutes=30)
        logger.info("DeepSeekService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _clean_old_contexts(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã"""
        now = datetime.now()
        expired_users = []
        
        for user_id, context in self.user_contexts.items():
            if 'created_at' in context and now - context['created_at'] > self.session_timeout:
                expired_users.append(user_id)
        
        for user_id in expired_users:
            del self.user_contexts[user_id]
            logger.debug(f"–£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ —Ç–∞–π–º–∞—É—Ç—É")

    async def get_ai_response(self, user_message: str, user_id: int = None, chat_history: Optional[List[Dict]] = None) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        self._clean_old_contexts()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id and user_id in self.user_contexts:
            context_response = self._handle_user_context(user_id, user_message)
            if context_response:
                return context_response

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = [{"role": "system", "content": self._get_system_prompt()}]
        
        if chat_history:
            messages.extend(chat_history[-6:])
        
        messages.append({"role": "user", "content": user_message})

        payload = {
            "model": "deepseek-chat",
            "messages": messages,
            "temperature": 0.3,
            "max_tokens": 500,
            "stream": False
        }

        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ DeepSeek –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message[:100]}...")
            
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(self.api_url, json=payload, headers=self.headers) as response:
                    
                    if response.status == 200:
                        data = await response.json()
                        response_text = data['choices'][0]['message']['content'].strip()
                        logger.info(f"DeepSeek –æ—Ç–≤–µ—Ç–∏–ª: {response_text[:100]}...")
                        return response_text
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ DeepSeek API: {response.status} - {error_text}")
                        return None
                        
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek: {e}")
            return None

    def _get_system_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI"""
        return """–¢—ã - AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Intickets. –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.
–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
–ü—Ä–∏ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å—Ä–∞–∑—É –∏–∑–≤–∏–Ω–∏—Å—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""

    def _handle_user_context(self, user_id: int, user_message: str) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context = self.user_contexts[user_id]
        
        if context.get('type') == 'payment_issue':
            return self._handle_payment_context(user_id, user_message, context)
        
        return None

    def _handle_payment_context(self, user_id: int, user_message: str, context: Dict) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø–ª–∞—Ç—ã"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        extracted_data = self._extract_payment_data(user_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context['data'].update(extracted_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±—Ä–∞–ª–∏ –ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        collected_data = context['data']
        has_order = 'order_number' in collected_data
        has_method = 'payment_method' in collected_data
        has_time = 'time_minutes' in collected_data
        
        logger.info(f"–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {collected_data}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –∏–∑ 3 –¥–∞–Ω–Ω—ã—Ö - —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º
        if (has_order and has_method) or (has_order and has_time) or (has_method and has_time):
            response = self._get_payment_solution_response(collected_data)
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è
            if user_id in self.user_contexts:
                del self.user_contexts[user_id]
            return response
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ –≤—Å–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
        return self._get_missing_data_response(collected_data)

    def _extract_payment_data(self, text: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        data = {}
        text_lower = text.lower()
        
        # –ò—â–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (6+ —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥)
        order_match = re.search(r'(\d{6,})', text)
        if order_match:
            data['order_number'] = order_match.group(1)
            logger.info(f"–ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {data['order_number']}")
        
        # –ò—â–µ–º –≤—Ä–µ–º—è
        time_match = re.search(r'(\d+)\s*(–º–∏–Ω|–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)', text_lower)
        if time_match:
            data['time_minutes'] = time_match.group(1)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è: {data['time_minutes']} –º–∏–Ω—É—Ç")
        
        # –ò—â–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        if any(word in text_lower for word in ['–ø—Ä–∏–ª–æ–∂–µ–Ω', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏', '–º–æ–±–∏–ª—å–Ω', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏']):
            data['payment_method'] = '–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
            logger.info("–ù–∞–π–¥–µ–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        elif any(word in text_lower for word in ['qr', '–∫–æ–¥', 'qr-–∫–æ–¥']):
            data['payment_method'] = 'QR-–∫–æ–¥'
            logger.info("–ù–∞–π–¥–µ–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: QR-–∫–æ–¥")
        elif any(word in text_lower for word in ['–∫–∞—Ä—Ç', '–∫–∞—Ä—Ç–æ–π', '–∫–∞—Ä—Ç—É', '–∫–∞—Ä—Ç–∞']):
            data['payment_method'] = '–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'
            logger.info("–ù–∞–π–¥–µ–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞")
        
        return data

    def _get_payment_solution_response(self, data: Dict) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        order_num = data.get('order_number', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        time_mins = data.get('time_minutes', '30')
        payment_method = data.get('payment_method', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        
        return (
            "‚úÖ **–û—Ç–ª–∏—á–Ω–æ, —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è!**\n\n"
            f"**–ü–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É ‚Ññ{order_num}:**\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: {payment_method}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞–∑–∞–¥: {time_mins} –º–∏–Ω—É—Ç\n"
            f"‚Ä¢ –î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–ª–∏—Å—å\n\n"
            "**–†–µ–∫–æ–º–µ–Ω–¥—É—é:**\n"
            "1Ô∏è‚É£ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ 15-20 –º–∏–Ω—É—Ç - –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞—é—Ç –∑–∞–¥–µ—Ä–∂–∫–∏\n"
            "2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email - –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n"
            "3Ô∏è‚É£ –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
            "üìû **–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏:** +7 (999) 123-45-67\n"
            "‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** 9:00-21:00\n\n"
            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —á–µ–º-—Ç–æ –µ—â–µ?"
        )

    def _get_missing_data_response(self, data: Dict) -> str:
        """–ó–∞–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        missing = []
        
        if 'order_number' not in data:
            missing.append("–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
        if 'payment_method' not in data:
            missing.append("—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")
        if 'time_minutes' not in data:
            missing.append("–≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã")
        
        if missing:
            return (
                "üîç **–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:**\n\n"
                f"–î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –Ω—É–∂–µ–Ω {' –∏ '.join(missing)}\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: 123456\n"
                "‚Ä¢ –û–ø–ª–∞—Ç–∏–ª –∫–∞—Ä—Ç–æ–π/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º/QR-–∫–æ–¥–æ–º\n"
                "‚Ä¢ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
            )
        
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    def detect_dissatisfaction(self, message_text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        dissatisfaction_phrases = [
            '–Ω–µ–¥–æ–≤–æ–ª–µ–Ω', '–ø–ª–æ—Ö–æ–π', '—É–∂–∞—Å–Ω—ã–π', '–∫–æ—à–º–∞—Ä', '–±–µ–∑–æ–±—Ä–∞–∑–∏–µ', '–≤–æ–∑–º—É—â–µ–Ω',
            '—Ö—Ä–µ–Ω–æ–≤–æ', '–æ—Ç—Å—Ç–æ–π', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', '–¥–æ—Å—Ç–∞–ª–æ', '–Ω–∞–¥–æ–µ–ª–æ',
            '—á–µ–ª–æ–≤–µ–∫–∞', '–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–º–µ–Ω–µ–¥–∂–µ—Ä–∞', '–∂–∏–≤–æ–≥–æ',
            '—ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç', '–±–µ—Å–ø–æ–ª–µ–∑–Ω–æ', '–∑—Ä—è', '–Ω–∞–ø—Ä–∞—Å–Ω–æ',
            '–≤–µ—Ä–Ω–∏—Ç–µ –¥–µ–Ω—å–≥–∏', '–∂–∞–ª–æ–±–∞', '–ø—Ä–µ—Ç–µ–Ω–∑–∏—è', '–≤–µ—Ä–Ω–∏—Ç–µ',
            '—Å–≤—è–∂–∏—Ç–µ —Å —á–µ–ª–æ–≤–µ–∫–æ–º', '–ø–æ–∑–æ–≤–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–¥–æ —á–µ–ª–æ–≤–µ–∫–∞'
        ]
        
        message_lower = message_text.lower()
        return any(phrase in message_lower for phrase in dissatisfaction_phrases)

    def get_greeting_response(self, message_text: str) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        greetings = [
            '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π', 'hello', 'hi', '–Ω–∞—á–∞—Ç—å',
            '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä',
            '–∑–¥—Ä–∞—Å—å—Ç–µ', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é', '–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'
        ]
        
        message_lower = message_text.lower().strip()
        
        words = message_lower.split()
        greeting_words = [word for word in words if any(greet in word for greet in greetings)]
        
        if len(greeting_words) >= 1 and len(greeting_words) / len(words) >= 0.5:
            greeting_templates = [
                "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Intickets! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –±–∏–ª–µ—Ç–∞–º –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!",
                "‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –±–∏–ª–µ—Ç–∞–º–∏, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."
            ]
            return random.choice(greeting_templates)
        
        return None

    def get_quick_response(self, message_text: str, user_id: int = None) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        normalized_text = ' '.join(message_text.lower().split())
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        self._clean_old_contexts()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π (–í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
        if self._is_payment_issue(normalized_text):
            if user_id:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.user_contexts[user_id] = {
                    'type': 'payment_issue',
                    'data': {},
                    'created_at': datetime.now()
                }
                logger.info(f"–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return self._get_payment_help_response()
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
        if self._is_thankful(normalized_text):
            return self._get_thankyou_response()
        
        # 3. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
        quick_responses = {
            '–±–∏–ª–µ—Ç—ã': "üí∞ –ë–∏–ª–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ. –ö–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            '–∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç': "üí≥ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ —Å–∞–π—Ç–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º",
            '–ø–æ–º–æ—â—å': "üîß –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!",
            '–≤–µ—Ä–Ω—É—Ç—å –±–∏–ª–µ—Ç': "üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –∑–∞ 3 –¥–Ω—è –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.",
            '–Ω–µ –ø—Ä–∏—à–µ–ª –±–∏–ª–µ—Ç': "üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É '–°–ø–∞–º'. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.",
            '–æ–ø–ª–∞—Ç–∞': "üí≥ –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—ã, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏. –ö–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π?",
            '–∫–æ–Ω—Ç–∞–∫—Ç—ã': "üìû Support: support@intickets.ru, +7 (999) 123-45-67",
            '—Å–∞–π—Ç': "üåê –ù–∞—à —Å–∞–π—Ç: https://intickets.ru"
        }
        
        for keyword, response in quick_responses.items():
            if keyword in normalized_text:
                return response
        
        return None

    def _is_payment_issue(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π"""
        payment_words = ['–æ–ø–ª–∞—Ç', '–ø–ª–∞—Ç–µ–∂', '–¥–µ–Ω—å–≥', '—Å–ø–∏—Å–∞–ª', '–Ω–µ –ø—Ä–æ—à–µ–ª', '–∑–∞–≤–∏—Å', '–ø–ª–∞—Ç–∏–ª', '–æ–ø–ª–∞—Ç–∏–ª']
        problem_words = ['–ø—Ä–æ–±–ª–µ–º', '–Ω–µ —Ä–∞–±–æ—Ç', '–æ—à–∏–±–∫', '—Å–ª–æ–º–∞–ª', '–Ω–µ –º–µ–Ω—è–µ—Ç—Å—è']
        return any(pword in text for pword in payment_words) and any(pword in text for pword in problem_words)

    def _is_thankful(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"""
        thankful_words = ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–ø–æ–º–æ–≥', '—Å—Ä–∞–±–æ—Ç–∞–ª–æ', '–ø–æ–ª—É—á–∏–ª–æ—Å—å', 'thanks', '—Ä–µ—à–∏–ª–æ—Å—å']
        return any(word in text for word in thankful_words)

    def _get_payment_help_response(self) -> str:
        """–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π"""
        return (
            "üí≥ **–ü–æ–º–æ—â—å —Å –æ–ø–ª–∞—Ç–æ–π:**\n\n"
            "–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è:\n\n"
            "‚úÖ **–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª:**\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã\n"
            "‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 15 –º–∏–Ω—É—Ç - –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞—é—Ç –∑–∞–¥–µ—Ä–∂–∫–∏\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email - –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
            "‚úÖ **–î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–ª–∏—Å—å, –Ω–æ –±–∏–ª–µ—Ç–æ–≤ –Ω–µ—Ç:**\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É '–°–ø–∞–º' –≤ –ø–æ—á—Ç–µ\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
            "‚úÖ **–ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–∞:**\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫\n\n"
            "üìû **–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å:**\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
        )

    def _get_thankyou_response(self) -> str:
        """–û—Ç–≤–µ—Ç –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"""
        responses = [
            "üéâ –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!",
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è - —è –∑–¥–µ—Å—å!",
            "ü§ù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!"
        ]
        return random.choice(responses)

    def clear_user_context(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_contexts:
            del self.user_contexts[user_id]
            logger.debug(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")